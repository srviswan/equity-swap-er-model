@startuml Equity_Swap_ER_Diagram
!define ENTITY(name,type) entity name as "name\n--\n<<type>>"
!define PRIMARY_KEY(key) <b><color:red>key</color></b>
!define FOREIGN_KEY(key) <color:blue>key</color>

title Equity Swap Management System - Entity Relationship Model\n(Based on FINOS CDM Rosetta Specification)

' =============================================================================
' REFERENCE DATA ENTITIES
' =============================================================================

ENTITY(Party, Reference) {
  PRIMARY_KEY(party_id) : VARCHAR(50)
  --
  party_name : VARCHAR(200)
  party_type : VARCHAR(20)
  lei_code : CHAR(20)
  party_identifiers : JSONB
  country_of_incorporation : CHAR(2)
  address : JSONB
  contact_information : JSONB
  regulatory_status : JSONB
  credit_rating : VARCHAR(10)
  is_active : BOOLEAN
  created_date : DATE
  last_updated : TIMESTAMP
}

ENTITY(Underlier, Reference) {
  PRIMARY_KEY(underlier_id) : VARCHAR(50)
  --
  asset_type : VARCHAR(20)
  primary_identifier : VARCHAR(50)
  identifier_type : VARCHAR(20)
  secondary_identifiers : JSONB
  asset_name : VARCHAR(200)
  asset_description : TEXT
  currency : CHAR(3)
  exchange : VARCHAR(50)
  country : CHAR(2)
  sector : VARCHAR(100)
  is_active : BOOLEAN
  created_date : DATE
  last_updated : TIMESTAMP
}

ENTITY(BasketComponent, Reference) {
  PRIMARY_KEY(component_id) : VARCHAR(50)
  --
  FOREIGN_KEY(basket_id) : VARCHAR(50)
  FOREIGN_KEY(component_underlier_id) : VARCHAR(50)
  weight : DECIMAL(10,6)
  shares : DECIMAL(18,6)
  effective_date : DATE
  termination_date : DATE
}

' =============================================================================
' PRODUCT DEFINITION ENTITIES
' =============================================================================

ENTITY(TradableProduct, Product) {
  PRIMARY_KEY(product_id) : VARCHAR(50)
  --
  product_type : VARCHAR(50)
  product_name : VARCHAR(200)
  asset_class : VARCHAR(50)
  sub_asset_class : VARCHAR(50)
  version : INTEGER
  is_active : BOOLEAN
  created_date : DATE
  created_by : VARCHAR(100)
}

ENTITY(EconomicTerms, Product) {
  PRIMARY_KEY(economic_terms_id) : VARCHAR(50)
  --
  FOREIGN_KEY(product_id) : VARCHAR(50)
  effective_date : DATE
  termination_date : DATE
  FOREIGN_KEY(calculation_agent_id) : VARCHAR(50)
  business_day_convention : VARCHAR(30)
  business_centers : JSONB
  extraordinary_events : JSONB
  version : INTEGER
}

' =============================================================================
' PAYOUT STRUCTURE ENTITIES
' =============================================================================

ENTITY(Payout, Payout) {
  PRIMARY_KEY(payout_id) : VARCHAR(50)
  --
  FOREIGN_KEY(economic_terms_id) : VARCHAR(50)
  payout_type : VARCHAR(20)
  FOREIGN_KEY(payer_party_id) : VARCHAR(50)
  FOREIGN_KEY(receiver_party_id) : VARCHAR(50)
  payment_frequency : VARCHAR(20)
  day_count_fraction : VARCHAR(10)
  currency : CHAR(3)
}

ENTITY(PerformancePayout, Payout) {
  PRIMARY_KEY(performance_payout_id) : VARCHAR(50)
  --
  FOREIGN_KEY(payout_id) : VARCHAR(50)
  return_type : VARCHAR(20)
  initial_price : DECIMAL(18,6)
  initial_price_date : DATE
  notional_amount : DECIMAL(18,2)
  notional_currency : CHAR(3)
  number_of_data_series : INTEGER
  observation_start_date : DATE
  observation_end_date : DATE
  valuation_time : TIME
  market_disruption_events : JSONB
}

ENTITY(PerformancePayoutUnderlier, Junction) {
  PRIMARY_KEY(performance_payout_id) : VARCHAR(50)
  PRIMARY_KEY(underlier_id) : VARCHAR(50)
  PRIMARY_KEY(effective_date) : DATE
  --
  weight : DECIMAL(10,6)
  termination_date : DATE
}

' =============================================================================
' TRADE ENTITIES
' =============================================================================

ENTITY(Trade, Trade) {
  PRIMARY_KEY(trade_id) : VARCHAR(50)
  --
  FOREIGN_KEY(product_id) : VARCHAR(50)
  trade_date : DATE
  trade_time : TIMESTAMP
  status : VARCHAR(20)
  master_agreement_id : VARCHAR(50)
  confirmation_method : VARCHAR(20)
  created_timestamp : TIMESTAMP
  updated_timestamp : TIMESTAMP
}

ENTITY(TradeState, Trade) {
  PRIMARY_KEY(trade_state_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  state_timestamp : TIMESTAMP
  state_type : VARCHAR(30)
  is_current : BOOLEAN
  FOREIGN_KEY(previous_state_id) : VARCHAR(50)
  created_by : VARCHAR(100)
}

ENTITY(PartyRole, Trade) {
  PRIMARY_KEY(party_role_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  FOREIGN_KEY(party_id) : VARCHAR(50)
  role_type : VARCHAR(30)
  role_description : TEXT
  effective_date : DATE
  termination_date : DATE
  created_by : VARCHAR(100)
  created_timestamp : TIMESTAMP
}

' =============================================================================
' EVENT AND LIFECYCLE ENTITIES
' =============================================================================

ENTITY(TradeEvent, Event) {
  PRIMARY_KEY(event_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  event_type : VARCHAR(30)
  event_date : DATE
  effective_date : DATE
  event_qualifier : VARCHAR(100)
  event_details : JSONB
  triggered_by : VARCHAR(100)
  processed_by : VARCHAR(100)
  processing_status : VARCHAR(20)
  created_timestamp : TIMESTAMP
}

ENTITY(ObservationEvent, Event) {
  PRIMARY_KEY(observation_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  observation_date : DATE
  observation_time : TIME
  FOREIGN_KEY(underlier_id) : VARCHAR(50)
  observed_price : DECIMAL(18,6)
  observation_type : VARCHAR(20)
  source : VARCHAR(100)
  market_disruption : BOOLEAN
  created_timestamp : TIMESTAMP
}

' =============================================================================
' VALUATION AND RISK ENTITIES
' =============================================================================

ENTITY(Valuation, Valuation) {
  PRIMARY_KEY(valuation_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  valuation_date : DATE
  valuation_time : TIMESTAMP
  valuation_type : VARCHAR(20)
  base_currency : CHAR(3)
  market_value : DECIMAL(18,2)
  unrealized_pnl : DECIMAL(18,2)
  daily_pnl : DECIMAL(18,2)
  pv01 : DECIMAL(18,6)
  delta : DECIMAL(18,6)
  gamma : DECIMAL(18,6)
  vega : DECIMAL(18,6)
  theta : DECIMAL(18,6)
  model_inputs : JSONB
  created_by : VARCHAR(100)
  created_timestamp : TIMESTAMP
}

' =============================================================================
' SETTLEMENT AND COLLATERAL ENTITIES
' =============================================================================

ENTITY(Settlement, Settlement) {
  PRIMARY_KEY(settlement_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  settlement_date : DATE
  settlement_type : VARCHAR(20)
  settlement_amount : DECIMAL(18,2)
  settlement_currency : CHAR(3)
  FOREIGN_KEY(payer_party_id) : VARCHAR(50)
  FOREIGN_KEY(receiver_party_id) : VARCHAR(50)
  payment_method : VARCHAR(20)
  settlement_status : VARCHAR(20)
  settlement_reference : VARCHAR(100)
  failure_reason : TEXT
  created_timestamp : TIMESTAMP
  settled_timestamp : TIMESTAMP
}

ENTITY(Collateral, Collateral) {
  PRIMARY_KEY(collateral_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  collateral_type : VARCHAR(30)
  collateral_amount : DECIMAL(18,2)
  collateral_currency : CHAR(3)
  FOREIGN_KEY(posting_party_id) : VARCHAR(50)
  FOREIGN_KEY(receiving_party_id) : VARCHAR(50)
  posting_date : DATE
  maturity_date : DATE
  haircut_percentage : DECIMAL(5,2)
  collateral_value : DECIMAL(18,2)
  status : VARCHAR(20)
  custodian : VARCHAR(100)
  created_timestamp : TIMESTAMP
}

' =============================================================================
' CROSS-CURRENCY ENTITIES
' =============================================================================

ENTITY(FXRate, Reference) {
  PRIMARY_KEY(fx_rate_id) : VARCHAR(50)
  --
  base_currency : CHAR(3)
  quote_currency : CHAR(3)
  rate_date : DATE
  rate_time : TIME
  rate_value : DECIMAL(15,8)
  rate_source : VARCHAR(100)
  rate_type : VARCHAR(20)
  forward_date : DATE
  is_active : BOOLEAN
  created_date : DATE
  last_updated : TIMESTAMP
}

ENTITY(CurrencyPair, Reference) {
  PRIMARY_KEY(currency_pair_id) : VARCHAR(50)
  --
  base_currency : CHAR(3)
  quote_currency : CHAR(3)
  pair_code : CHAR(6)
  market_convention : VARCHAR(100)
  spot_days : INTEGER
  tick_size : DECIMAL(10,8)
  is_active : BOOLEAN
  created_date : DATE
}

ENTITY(FXResetEvent, Event) {
  PRIMARY_KEY(fx_reset_id) : VARCHAR(50)
  --
  FOREIGN_KEY(trade_id) : VARCHAR(50)
  FOREIGN_KEY(payout_id) : VARCHAR(50)
  reset_date : DATE
  reset_time : TIME
  base_currency : CHAR(3)
  quote_currency : CHAR(3)
  fx_rate : DECIMAL(15,8)
  fx_rate_source : VARCHAR(100)
  reset_type : VARCHAR(20)
  reset_status : VARCHAR(20)
  payment_date : DATE
  created_date : DATE
  last_updated : TIMESTAMP
}

' =============================================================================
' AUDIT AND DATA QUALITY ENTITIES
' =============================================================================

ENTITY(DataQualityRule, Control) {
  PRIMARY_KEY(rule_id) : VARCHAR(50)
  --
  rule_name : VARCHAR(100)
  rule_description : TEXT
  entity_type : VARCHAR(50)
  field_name : VARCHAR(50)
  rule_type : VARCHAR(20)
  rule_expression : TEXT
  severity_level : VARCHAR(10)
  is_active : BOOLEAN
  created_date : DATE
}

ENTITY(AuditLog, Audit) {
  PRIMARY_KEY(audit_id) : VARCHAR(50)
  --
  table_name : VARCHAR(100)
  record_id : VARCHAR(50)
  operation_type : VARCHAR(10)
  old_values : JSONB
  new_values : JSONB
  changed_by : VARCHAR(100)
  change_reason : TEXT
  change_timestamp : TIMESTAMP
  session_id : VARCHAR(100)
  ip_address : VARCHAR(45)
}

' =============================================================================
' RELATIONSHIPS
' =============================================================================

' Reference Data Relationships
Underlier ||--o{ BasketComponent : "basket contains"
Underlier ||--o{ BasketComponent : "components"

' Product Relationships
TradableProduct ||--o{ EconomicTerms : "has terms"
EconomicTerms ||--o{ Payout : "defines payouts"
Payout ||--|| PerformancePayout : "extends"
PerformancePayout }o--o{ Underlier : "references"
(PerformancePayout, Underlier) .. PerformancePayoutUnderlier

' Party Relationships
Party ||--o{ EconomicTerms : "calculation agent"
Party ||--o{ Payout : "payer"
Party ||--o{ Payout : "receiver"
Party ||--o{ PartyRole : "plays role"

' Trade Relationships
TradableProduct ||--o{ Trade : "traded as"
Trade ||--o{ TradeState : "has states"
Trade ||--o{ PartyRole : "involves parties"
Trade ||--o{ TradeEvent : "generates events"
Trade ||--o{ ObservationEvent : "observes prices"
Trade ||--o{ Valuation : "valued"
Trade ||--o{ Settlement : "settles"
Trade ||--o{ Collateral : "secured by"

' Event Relationships
TradeState ||--o{ TradeState : "previous state"
Underlier ||--o{ ObservationEvent : "observed"

' Settlement and Collateral Relationships
Party ||--o{ Settlement : "payer"
Party ||--o{ Settlement : "receiver"
Party ||--o{ Collateral : "posting party"
Party ||--o{ Collateral : "receiving party"

' Cross-Currency Relationships
CurrencyPair ||--o{ FXRate : "has rates"
FXResetEvent }o--|| Trade : "belongs to"
FXResetEvent }o--|| Payout : "affects"
FXResetEvent }o--|| FXRate : "uses rate"

' ====================================================================================
' WORKFLOW MANAGEMENT ENTITIES
' ====================================================================================

ENTITY(WorkflowDefinition, Workflow) {
  PRIMARY_KEY(workflow_definition_id) : VARCHAR(50)
  --
  workflow_name : VARCHAR(100)
  workflow_type : ENUM
  workflow_version : VARCHAR(20)
  description : TEXT
  is_active : BOOLEAN
  auto_start : BOOLEAN
  timeout_hours : INTEGER
  created_by : VARCHAR(50)
  created_date : TIMESTAMP
  modified_by : VARCHAR(50)
  modified_date : TIMESTAMP
}

ENTITY(WorkflowInstance, Workflow) {
  PRIMARY_KEY(workflow_instance_id) : VARCHAR(50)
  --
  workflow_definition_id : VARCHAR(50)
  entity_type : VARCHAR(50)
  entity_id : VARCHAR(50)
  instance_status : ENUM
  priority_level : INTEGER
  started_date : TIMESTAMP
  completed_date : TIMESTAMP
  timeout_date : TIMESTAMP
  error_message : TEXT
  created_by : VARCHAR(50)
  created_date : TIMESTAMP
}

ENTITY(WorkflowStep, Workflow) {
  PRIMARY_KEY(workflow_step_id) : VARCHAR(50)
  --
  workflow_definition_id : VARCHAR(50)
  step_name : VARCHAR(100)
  step_order : INTEGER
  step_type : ENUM
  is_mandatory : BOOLEAN
  auto_execute : BOOLEAN
  timeout_minutes : INTEGER
  retry_count : INTEGER
  prerequisite_steps : TEXT
  configuration : TEXT
  created_date : TIMESTAMP
}

ENTITY(WorkflowTask, Workflow) {
  PRIMARY_KEY(workflow_task_id) : VARCHAR(50)
  --
  workflow_instance_id : VARCHAR(50)
  workflow_step_id : VARCHAR(50)
  task_status : ENUM
  assigned_to : VARCHAR(50)
  started_date : TIMESTAMP
  completed_date : TIMESTAMP
  retry_attempts : INTEGER
  result_data : TEXT
  error_details : TEXT
  created_date : TIMESTAMP
}

' ====================================================================================
' EXCEPTION HANDLING ENTITIES
' ====================================================================================

ENTITY(Exception, Exception) {
  PRIMARY_KEY(exception_id) : VARCHAR(50)
  --
  exception_type : ENUM
  severity_level : ENUM
  entity_type : VARCHAR(50)
  entity_id : VARCHAR(50)
  exception_status : ENUM
  exception_message : TEXT
  exception_details : TEXT
  workflow_instance_id : VARCHAR(50)
  assigned_to : VARCHAR(50)
  resolution_notes : TEXT
  auto_retry : BOOLEAN
  retry_count : INTEGER
  max_retries : INTEGER
  next_retry_date : TIMESTAMP
  escalation_date : TIMESTAMP
  resolved_date : TIMESTAMP
  created_by : VARCHAR(50)
  created_date : TIMESTAMP
}

ENTITY(ExceptionRule, Exception) {
  PRIMARY_KEY(exception_rule_id) : VARCHAR(50)
  --
  rule_name : VARCHAR(100)
  exception_type : VARCHAR(50)
  entity_type : VARCHAR(50)
  severity_level : VARCHAR(10)
  rule_condition : TEXT
  action_type : ENUM
  action_configuration : TEXT
  retry_delay_minutes : INTEGER
  escalation_delay_hours : INTEGER
  notification_recipients : TEXT
  is_active : BOOLEAN
  created_date : TIMESTAMP
}

' ====================================================================================
' STP (STRAIGHT-THROUGH PROCESSING) ENTITIES
' ====================================================================================

ENTITY(STPRule, Processing) {
  PRIMARY_KEY(stp_rule_id) : VARCHAR(50)
  --
  rule_name : VARCHAR(100)
  entity_type : VARCHAR(50)
  rule_category : ENUM
  rule_condition : TEXT
  auto_process : BOOLEAN
  bypass_manual_check : BOOLEAN
  processing_priority : INTEGER
  tolerance_thresholds : TEXT
  business_hours_only : BOOLEAN
  is_active : BOOLEAN
  created_date : TIMESTAMP
}

ENTITY(STPStatus, Processing) {
  PRIMARY_KEY(stp_status_id) : VARCHAR(50)
  --
  entity_type : VARCHAR(50)
  entity_id : VARCHAR(50)
  stp_eligible : BOOLEAN
  eligibility_reason : TEXT
  processing_status : ENUM
  stp_percentage : DECIMAL(5,2)
  manual_steps_required : TEXT
  processing_started_date : TIMESTAMP
  processing_completed_date : TIMESTAMP
  workflow_instance_id : VARCHAR(50)
  created_date : TIMESTAMP
}

ENTITY(ProcessingRule, Processing) {
  PRIMARY_KEY(processing_rule_id) : VARCHAR(50)
  --
  rule_name : VARCHAR(100)
  rule_type : ENUM
  entity_type : VARCHAR(50)
  rule_expression : TEXT
  action_configuration : TEXT
  execution_order : INTEGER
  is_blocking : BOOLEAN
  error_handling : ENUM
  is_active : BOOLEAN
  created_by : VARCHAR(50)
  created_date : TIMESTAMP
}

' ====================================================================================
' RECONCILIATION ENTITIES
' ====================================================================================

ENTITY(ReconciliationRun, Reconciliation) {
  PRIMARY_KEY(recon_run_id) : VARCHAR(50)
  --
  recon_type : ENUM
  recon_frequency : ENUM
  business_date : DATE
  run_status : ENUM
  source_system : VARCHAR(50)
  target_system : VARCHAR(50)
  total_records_processed : INTEGER
  matched_records : INTEGER
  unmatched_records : INTEGER
  breaks_identified : INTEGER
  tolerance_amount : DECIMAL(18,2)
  started_date : TIMESTAMP
  completed_date : TIMESTAMP
  run_duration_seconds : INTEGER
  configuration : TEXT
  created_by : VARCHAR(50)
  created_date : TIMESTAMP
}

ENTITY(ReconciliationBreak, Reconciliation) {
  PRIMARY_KEY(recon_break_id) : VARCHAR(50)
  --
  recon_run_id : VARCHAR(50)
  break_type : ENUM
  entity_type : VARCHAR(50)
  entity_id : VARCHAR(50)
  break_status : ENUM
  break_amount : DECIMAL(18,2)
  break_currency : CHAR(3)
  source_value : TEXT
  target_value : TEXT
  break_description : TEXT
  investigation_notes : TEXT
  resolution_action : TEXT
  assigned_to : VARCHAR(50)
  age_in_days : INTEGER
  resolved_date : TIMESTAMP
  exception_id : VARCHAR(50)
  created_date : TIMESTAMP
}

ENTITY(ReconciliationRule, Reconciliation) {
  PRIMARY_KEY(recon_rule_id) : VARCHAR(50)
  --
  rule_name : VARCHAR(100)
  recon_type : VARCHAR(30)
  matching_criteria : TEXT
  tolerance_rules : TEXT
  break_classification : TEXT
  auto_resolution_rules : TEXT
  priority_order : INTEGER
  is_active : BOOLEAN
  effective_date : DATE
  expiry_date : DATE
  created_by : VARCHAR(50)
  created_date : TIMESTAMP
}

' ====================================================================================
' WORKFLOW AND OPERATIONAL RELATIONSHIPS
' ====================================================================================

' Workflow Relationships
WorkflowDefinition ||--o{ WorkflowInstance : "creates instances"
WorkflowDefinition ||--o{ WorkflowStep : "defines steps"
WorkflowInstance ||--o{ WorkflowTask : "executes tasks"
WorkflowStep ||--o{ WorkflowTask : "task instances"
WorkflowInstance ||--o{ Exception : "may create"

' Exception Relationships
Exception }o--|| WorkflowInstance : "may relate to"
ReconciliationBreak }o--|| Exception : "may create"

' STP Relationships
STPStatus }o--|| WorkflowInstance : "tracks processing"

' Reconciliation Relationships
ReconciliationRun ||--o{ ReconciliationBreak : "identifies breaks"

' Entity Processing Relationships
Trade ||--o{ WorkflowInstance : "triggers workflows"
Trade ||--o{ STPStatus : "has STP status"
Trade ||--o{ Exception : "may have exceptions"
Settlement ||--o{ WorkflowInstance : "triggers workflows"
Settlement ||--o{ Exception : "may have exceptions"
Valuation ||--o{ ReconciliationBreak : "reconciliation breaks"

' =============================================================================
' LEGEND AND NOTES
' =============================================================================

note top : **Equity Swap ER Model Key Features**\n• Based on FINOS CDM Rosetta specification\n• Supports all equity swap types (price return, total return, variance, volatility)\n• Comprehensive lifecycle management\n• Full audit trail and data quality controls\n• Regulatory compliance ready

note bottom : **Entity Color Coding:**\n• Reference Data (Party, Underlier)\n• Product Definition (TradableProduct, EconomicTerms)\n• Payout Structure (Payout, PerformancePayout)\n• Trade Core (Trade, TradeState)\n• Events & Lifecycle (TradeEvent, ObservationEvent)\n• Risk & Valuation (Valuation)\n• Settlement & Collateral (Settlement, Collateral)\n• Audit & Quality (DataQualityRule, AuditLog)

@enduml
